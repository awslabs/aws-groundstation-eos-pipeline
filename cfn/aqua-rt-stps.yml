# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# This template will do the following:
# - Create a DataDeliveryServiceRole which the Ground Station service will use to create required resources in your AWS account
# - Create an IAM Role and Instance Profile with permission to connect to a specified S3 bucket
# - Setup and ENI to receive data from the Ground Station Service
# - Create a Receiver EC2 instance
# - Attach the Instance Profile to the EC2 Receiver Instance
# - Attach the ENI to the EC2 Receiver Instance
# - Create a Ground Station Mission Profile
# - Create a Ground Station Demodulation and Decode configuration
# - Create an SNS Topic to notify data capture completion
# - Create GroundStation CloudWatch events
# - Create a Lambda function, to auto start the EC2 instance during PREPASS

# The EC2 instance will do the following:
# - Install and run Data Defender software which ensures bit-for-bit accuracy of the VITA49 stream from the Ground Station Service
# - Install and run scripts to extract the payload from the VITA40 stream
# - Install and run RT-STPS (Real-time Software Telemetry Processing System) to process the raw payload into level 0 data
# - Push the level 0 data to the specified S3 bucket

# Considerations:
# - This requires a pre-created S3 bucket with the required software and files uploaded to the bucket
# - This requires a pre-created VPC with at least one public subnet
# - The EC2 instance requires a pre-created SSH key
# - The EC2 instance is configured with a public IP address for easier testing, you may not want this same configuration in your environment

AWSTemplateFormatVersion: '2010-09-09'
Description: Ground Station stack for AQUA

Parameters:

  SSHCidrBlock:
    Description: The CIDR Block that the security group will allow ssh access to an instance. The CIDR Block has the form x.x.x.x/x.
    Type: String
    Default: "10.0.0.0/32"
    AllowedPattern : '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    ConstraintDescription : must be a valid CIDR range of the form x.x.x.x/x, for example "10.0.0.0/16".

  SSHKeyName:
    Description: Name of the ssh key used to access ec2 hosts. Set this up ahead of time.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: ""

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to launch instances in.
    Default: ""

  SubnetId:
    Description: Subnet to launch instances in
    Type: AWS::EC2::Subnet::Id
    Default: ""

  SatelliteName:
    Type: String
    Description: Used for data receiver task
    Default: "AQUA"
    AllowedValues:
      - AQUA

  S3Bucket:
    Type: String
    Description: Will store software and data received from Satellites.
    Default: "eo-pipeline-bucket"
    AllowedPattern: "^[a-z0-9-]+$"

  NotificationEmail:
    Default: 'someone@somewhere.com'
    Description: "Email address to receive contact updates"
    Type: String
    AllowedPattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
    ConstraintDescription: "Must be a valid email adress"

Resources:

# ============================================
# GS AMI Resources
# ============================================

  AMINameRetrievalLambda:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        !Sub
        - arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionName}
        - { LambdaFunctionName: !Ref GroundStationAmazonMachineImageNameRetrievalLambda }
      Region:
        !Sub '${AWS::Region}'
      AMIComponents: "DDX 2.6.2 Only"

  GroundStationAmazonMachineImageNameRetrievalLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeImages'
                Resource: '*'
              - Action:
                - "s3:GetObject"
                Effect: Allow
                Resource:
                  Fn::Join:
                  - ""
                  -
                    - "arn:aws:s3:::"
                    - space-solutions-
                    - !Ref "AWS::Region"
                    - "/*"
          PolicyName: EC2DescribeImagesOnly
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']

  GroundStationAmazonMachineImageNameRetrievalLambda:
      Type: AWS::Lambda::Function
      Properties:
        Handler: index.lambda_ami_lookup_event
        Runtime: python3.9
        MemorySize: 128
        Timeout: 5
        Role: !GetAtt GroundStationAmazonMachineImageNameRetrievalLambdaRole.Arn
        Code:
          ZipFile:
            |
            import boto3
            import logging
            import json
            import urllib3

            SUCCESS = "SUCCESS"
            FAILED = "FAILED"

            logger = logging.getLogger(__name__)
            logger.setLevel(logging.INFO)

            AMI_FILTER_DICT = {
                "DDX 2.6.2 Only": "groundstation-al2-ddx2.6.2-ami-*",
                "DDX 2.6.2 with qRadio 3.6.0": "groundstation-al2-ddx2.6.2-qradio3.6.0-ami-*",
            }

            def lambda_ami_lookup_event(event, context):
                logger.info("AMI Lookup Event Lambda invoked with event data " + json.dumps(event))

                response_data = {}

                if 'RequestType' in event:
                    if 'Delete' == event['RequestType']:
                        logger.info("Delete Request Type Received")
                        send_response(event, context, SUCCESS, response_data)
                        return

                if 'ResourceProperties' not in event:
                    logger.info("Cannot determine an AMI from event data.")
                    send_response(event, context, FAILED, response_data)
                    return

                region = event['ResourceProperties']['Region']
                ami_components = event['ResourceProperties']['AMIComponents']
                ami_filter = AMI_FILTER_DICT.get(ami_components, "Invalid AMI Component String")
                try:
                    s3_client = boto3.client('s3')
                    s3_client.download_file('space-solutions-'+region, 'gs/gs-ami-account-ids.txt', '/tmp/gs-ami-account-ids.txt')
                    ami_acc_str=open('/tmp/gs-ami-account-ids.txt').read()
                    ami_acc_list = ami_acc_str.replace("'","").split(",\n")

                    ec2_client = boto3.client('ec2', region_name=region) # Change as appropriate
                    images = ec2_client.describe_images(Filters=[
                    {
                        'Name': 'name',
                        'Values': [ami_filter]
                    },], Owners=ami_acc_list)
                    images_sorted_by_newest_date_in_name = sorted(images['Images'], key=lambda k: k['Name'], reverse=True)
                    response_data["Id"] = images_sorted_by_newest_date_in_name[0]['ImageId']
                    response_data["ImageName"] = images_sorted_by_newest_date_in_name[0]['Name']
                    send_response(event, context, SUCCESS, response_data)
                    logger.info("AMI Lookup Event Lambda handler execution complete")
                    return
                except Exception as e:
                    logger.error("AMI Lookup  Event Lambda handler exception: {}".format(e))
                    send_response(event, context, FAILED, response_data)
                    return

            def send_response(event, context, response_status, response_data, physical_resource_id=None, no_echo=False):
                http = urllib3.PoolManager()

                response_url = event['ResponseURL']

                response_body = {}
                response_body['Status'] = response_status
                response_body['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
                response_body['PhysicalResourceId'] = physical_resource_id or context.log_stream_name
                response_body['StackId'] = event['StackId']
                response_body['RequestId'] = event['RequestId']
                response_body['LogicalResourceId'] = event['LogicalResourceId']
                response_body['NoEcho'] = no_echo
                response_body['Data'] = response_data

                json_response_body = json.dumps(response_body)

                headers = {
                    'content-type' : '',
                    'content-length' : str(len(json_response_body))
                }

                logger.info("AMI Lookup  Event Lambda handler sending response request " + json.dumps(json_response_body))
                try:
                    response = http.request("PUT", response_url,
                                            body=json_response_body,
                                            headers=headers)
                    logger.info(f"AMI Lookup handler status: {response.status}")
                except Exception as e:
                    logger.error("send_response(..) failed executing http.request(..): " + str(e))

# ============================================
# SNS Resources
# ============================================

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName:
        Fn::Join:
          - "-"
          - - "GroundStation-Contact"
            - !Ref SatelliteName
      Subscription:
        - Endpoint: !Ref NotificationEmail
          Protocol: "email"

# ============================================
# IAM Resources
# ============================================

  # AWS Ground Station assumes this role to create/delete ENIs in your account in order to stream data.
  DataDeliveryServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterfacePermission
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ec2:DescribeSecurityGroups
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: DataDeliveryServicePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - groundstation.amazonaws.com
            Action:
            - sts:AssumeRole

  # The EC2 instance assumes this role.
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceRoleS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action:
          - "s3:PutObject"
          - "s3:PutObjectAcl"
          - "s3:GetObject"
          Effect: Allow
          Resource:
            Fn::Join:
            - ""
            -
              - "arn:aws:s3:::"
              - !Ref S3Bucket
              - "/*"
        - Action:
          - "s3:GetObject"
          Effect: Allow
          Resource:
            Fn::Join:
            - ""
            -
              - "arn:aws:s3:::"
              - "groundstation-customer-assets-"
              - !Ref "AWS::Region"
              - "/*"

        - Action:
          - "s3:ListBucket"
          Effect: Allow
          Resource:
            Fn::Join:
              - ""
              -
                - "arn:aws:s3:::"
                - !Ref S3Bucket
        - Action:
          - "s3:ListBucket"
          Effect: Allow
          Resource:
            Fn::Join:
            - ""
            -
              - "arn:aws:s3:::"
              - "groundstation-customer-assets-"
              - !Ref "AWS::Region"
              - "/*"
      Roles:
      - Ref: InstanceRole

  InstanceRoleSNSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action:
          - "sns:Publish"
          Effect: Allow
          Resource: !Ref SNSTopic
      Roles:
      - Ref: InstanceRole

# ============================================
# Security Groups
# ============================================

  # The security group for your EC2 instance.
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AWS Ground Station receiver instance security group.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow SSH access from the CIDR block specified in the parameters.
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCidrBlock
          Description: "Inbound SSH access"
        # Allow a connection from Ground Station
        - IpProtocol: udp
          FromPort: 55888
          ToPort: 55888
          SourceSecurityGroupId: !Ref DataflowEndpointSecurityGroup
          Description: "AWS Ground Station Downlink Demod Decode Stream"
        # Allow a connection to the web interface
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SSHCidrBlock
          Description: "Inbound HTTP access for Data Defender web console"

  # The security group that the ENI created by AWS Ground Station belongs to.
  DataflowEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for AWS Ground Station registration of Dataflow Endpoint Groups
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: udp
          FromPort: 55888
          ToPort: 55888
          CidrIp: 10.0.0.0/8
          Description: "AWS Ground Station Downlink Demod Decode Stream To 10/8"
        - IpProtocol: udp
          FromPort: 55888
          ToPort: 55888
          CidrIp: 172.16.0.0/12
          Description: "AWS Ground Station Downlink Demod Decode Stream To 172.16/12"
        - IpProtocol: udp
          FromPort: 55888
          ToPort: 55888
          CidrIp: 192.168.0.0/16
          Description: "AWS Ground Station Downlink Demod Decode Stream To 192.168/16"

# ============================================
# Network Resources
# ============================================

  InstanceEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'

  InstanceEIPAsscociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt InstanceEIP.AllocationId
      NetworkInterfaceId: !Ref ReceiverInstanceNetworkInterfacePublic

  # An ENI providing a fixed IP address for AWS Ground Station to connect to.
  ReceiverInstanceNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Floating network interface providing a fixed IP address for AWS Ground Station to connect to.
      GroupSet:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref SubnetId

  # Public ENI for troubleshooting
  ReceiverInstanceNetworkInterfacePublic:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Public network interface for troubleshooting
      GroupSet:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref SubnetId

# ============================================
# EC2 Instance Resources
# ============================================

  # The instance profile for your EC2 instance.
  GeneralInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: InstanceRole
    Properties:
      Roles:
        - !Ref InstanceRole

  # The EC2 instance that will send/receive data to/from your satellite using AWS Ground Station.
  ReceiverInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - InstanceSecurityGroup
      - GeneralInstanceProfile
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref GeneralInstanceProfile
      ImageId: !GetAtt AMINameRetrievalLambda.Id
      InstanceType: "m5.4xlarge"
      KeyName: !Ref SSHKeyName
      Monitoring: true

      NetworkInterfaces:
        - NetworkInterfaceId: !Ref ReceiverInstanceNetworkInterfacePublic
          DeviceIndex: 0
        - NetworkInterfaceId: !Ref ReceiverInstanceNetworkInterface
          DeviceIndex: 1
          DeleteOnTermination: false

      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 100
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Receiver
                - !Ref AWS::StackName
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
              echo `date +'%F %R:%S'` "INFO: Logging Setup" >&2

              echo "Setting instance hostname"
              export INSTANCE=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
              export HOSTNAME=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE" "Name=key,Values=Name" --region=${AWS::Region} --output=text |cut -f5)
              echo $HOSTNAME > /etc/hostname
              hostname $HOSTNAME

              echo "Installing RT-STPS pre-reqs"
              yum update -y && yum install -y wget java python3

              echo "Adding UDP buffer size increase to /etc/sysctl.d/10-udp-buffers.conf"
              echo "net.core.rmem_default=26214400" >> /etc/sysctl.d/10-udp-buffers.conf
              echo "net.core.rmem_max=104857600" >> /etc/sysctl.d/10-udp-buffers.conf
              echo "net.core.wmem_default=65536" >> /etc/sysctl.d/10-udp-buffers.conf
              echo "net.core.wmem_max=104857600" >> /etc/sysctl.d/10-udp-buffers.conf
              sysctl -p /etc/sysctl.d/10-udp-buffers.conf

              GROUND_STATION_DIR="/opt/aws/groundstation"
              GROUND_STATION_BIN_DIR="$GROUND_STATION_DIR/bin"
              STREAM_CONFIG_PATH="$GROUND_STATION_DIR/customer_stream_config.json"
              DATA_CAPTURE_SCRIPT="$GROUND_STATION_BIN_DIR/start-data-capture.sh"

              echo "Creating $GROUND_STATION_BIN_DIR"
              mkdir -p "$GROUND_STATION_BIN_DIR"

              echo "Getting Assets from S3"
              aws s3 cp --region ${AWS::Region} "s3://${S3Bucket}/software/data-receiver/start-data-capture.sh" "$DATA_CAPTURE_SCRIPT"
              chmod +x "$DATA_CAPTURE_SCRIPT"
              chown ec2-user:ec2-user "$DATA_CAPTURE_SCRIPT"

              echo "Adding call to $DATA_CAPTURE_SCRIPT into /etc/rc.local"
              echo "TIMESTR=\$(date '+%Y%m%d-%H%M')" >> /etc/rc.local
              echo "$DATA_CAPTURE_SCRIPT ${SatelliteName} ${S3Bucket} 2>&1 | tee $GROUND_STATION_BIN_DIR/data-capture_\$TIMESTR.log" >> /etc/rc.local

              echo "Creating /opt/aws/groundstation/bin/getSNSTopic.sh"
              echo "export SNS_TOPIC=${SNSTopicArn}" > /opt/aws/groundstation/bin/getSNSTopic.sh
              chmod +x /opt/aws/groundstation/bin/getSNSTopic.sh


              echo "Creating $STREAM_CONFIG_PATH"
              cat << STREAM_CONFIG > "$STREAM_CONFIG_PATH"
              {
                "ddx_streams": [
                  {
                    "streamName": "DownlinkDemodDecode",
                    "maximumWanRate": 4000000000,
                    "lanConfigDevice": "lo",
                    "lanConfigPort": 50000,
                    "wanConfigDevice": "eth1",
                    "wanConfigPort": 55888,
                    "isUplink": false
                  }
                ]
              }
              STREAM_CONFIG

              echo "Waiting for Data Defender to start"
              while netstat -lnt | awk '$4 ~ /:80$/ {exit 1}'; do sleep 10; done

              echo "Configuring Data Defender streams"
              python "$GROUND_STATION_BIN_DIR/configure_streams.py" --configFileName "$STREAM_CONFIG_PATH"
              sleep 2
              python "$GROUND_STATION_BIN_DIR/save_default_config.py"

              echo "Sending completion SNS notification"
              export MESSAGE="GroundStation setup is complete for Satellite: ${SatelliteName}.  The Receiver EC2 instance is all setup and ready to go! It will be automatically started a few minutes before the scheduled satellite contact.  Data will be downlinked and processed using RT-STPS, then copied to the following S3 Bucket: ${S3Bucket}.  A summary of the contact will be emailed to ${NotificationEmail}. The EC2 instance will now be stopped."
              aws sns publish --topic-arn ${SNSTopicArn} --message "$MESSAGE" --region ${AWS::Region}

              echo "Shutting down the EC2 instance"
              shutdown -h now

              exit 0
            - SNSTopicArn: !Ref SNSTopic

# ============================================
# Ground Station Resources
# ============================================

  # The AWS Ground Station Dataflow Endpoint Group that defines the endpoints that AWS Ground
  # Station will use to send/receive data to/from your satellite.
  DataflowEndpointGroup:
    Type: AWS::GroundStation::DataflowEndpointGroup
    Properties:
      EndpointDetails:
        - Endpoint:
            Name: !Sub "${AWS::StackName}-Downlink-Decode"
            Address:
              Name: !GetAtt ReceiverInstanceNetworkInterface.PrimaryPrivateIpAddress
              Port: 55888
          SecurityDetails:
            SecurityGroupIds:
              - Ref: "DataflowEndpointSecurityGroup"
            SubnetIds:
              - Ref: "SubnetId"
            RoleArn: !GetAtt DataDeliveryServiceRole.Arn

  # The AWS Ground Station Tracking Config that defines how the antenna system will track your
  # satellite as it moves through the sky.
  TrackingConfig:
    Type: AWS::GroundStation::Config
    Properties:
      Name: "Aqua Tracking Config"
      ConfigData:
        TrackingConfig:
          Autotrack: "PREFERRED"

  # The AWS Ground Station Antenna Downlink Config that defines the frequency spectrum used to
  # downlink data from your satellite.
  AquaDownlinkDemodDecodeAntennaConfig:
    Type: AWS::GroundStation::Config
    Properties:
      Name: !Sub "${AWS::StackName}-Aqua-27424-Downlink-Demod-Antenna-Config"
      ConfigData:
        AntennaDownlinkDemodDecodeConfig:
          SpectrumConfig:
            Bandwidth:
              Units: "MHz"
              Value: 30
            CenterFrequency:
              Units: "MHz"
              Value: 8160
            Polarization: "RIGHT_HAND"
          DecodeConfig:
            UnvalidatedJSON: '{
              "edges": [
                {
                  "from": "I-A",
                  "to": "I-B"
                },
                {
                  "from": "Q-A",
                  "to": "Q-B"
                },
                {
                  "from": "I-B",
                  "to": "C"
                },
                {
                  "from": "Q-B",
                  "to": "C"
                },
                {
                  "from": "C",
                  "to": "G"
                }
              ],
              "nodeConfigs": {
                "I-A": {
                  "type": "CODED_SYMBOLS_INGRESS",
                  "codedSymbolsIngress": {
                    "source": "I"
                  }
                },
                "Q-A": {
                  "type": "CODED_SYMBOLS_INGRESS",
                  "codedSymbolsIngress": {
                    "source": "Q"
                  }
                },
                "I-B": {
                  "type": "NRZ_M_DECODER"
                },
                "Q-B": {
                  "type": "NRZ_M_DECODER"
                },
                "C": {
                  "type": "IQ_RECOMBINER"
                },
                "G": {
                  "type": "UNCODED_FRAMES_EGRESS"
                }
              }
            }'
          DemodulationConfig:
            unvalidatedJSON: '{
              "type":"OQPSK",
              "oqpsk":{
                "carrierFrequencyRecovery":{
                  "centerFrequency":{
                    "value":8160,
                    "units":"MHz"
                  },
                  "range":{
                    "value":250,
                    "units":"kHz"
                  }
                },
                "symbolTimingRecovery":{
                  "symbolRate":{
                    "value":7.5,
                    "units":"Msps"
                  },
                  "range":{
                    "value":0.75,
                    "units":"ksps"
                  },
                  "matchedFilter":{
                    "type":"ROOT_RAISED_COSINE",
                    "rolloffFactor":0.5
                  }
                }
              }
            }'

  # The AWS Ground Station Dataflow Endpoint Config that defines the endpoint used to downlink data
  # from your satellite.
  DownlinkDemodDecodeEndpointConfig:
    Type: AWS::GroundStation::Config
    Properties:
      Name: "Aqua Downlink Demod Decode Endpoint Config"
      ConfigData:
        DataflowEndpointConfig:
          DataflowEndpointName: !Sub "${AWS::StackName}-Downlink-Decode"
          DataflowEndpointRegion: !Ref AWS::Region

  AquaMissionProfile:
    Type: AWS::GroundStation::MissionProfile
    Properties:
      Name: !Sub "${AWS::StackName}-Aqua-27424"
      ContactPrePassDurationSeconds: 120
      ContactPostPassDurationSeconds: 60
      MinimumViableContactDurationSeconds: 180
      TrackingConfigArn: !Ref TrackingConfig
      DataflowEdges:
        - Source: !Join [ "/", [ !Ref AquaDownlinkDemodDecodeAntennaConfig, "G" ] ]
          Destination: !Ref DownlinkDemodDecodeEndpointConfig

# ============================================
# GroundStation CloudWatch events and Lambda
# ============================================

# Events received in the region where the data is being delivered.
# Events sent when state transitions into PREPASS, PASS, POSTPASS and COMPLETED.
# Lambda starts up Received EC2 instance on transition to PREPASS
# After processing, the EC2 instance shuts down automatically

  GroundStationCloudWatchEventHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handle_cloudwatch_event
      Runtime: python3.9
      MemorySize: 128
      Timeout: 120
      Role: !GetAtt GroundStationCloudWatchEventHandlerLambdaRole.Arn
      Code:
        ZipFile: |
              import json
              import logging
              import boto3

              logger = logging.getLogger(__name__)
              logger.setLevel(logging.INFO)

              def handle_cloudwatch_event(lambda_event, context):
                  logger.info(f"Called with event {json.dumps(lambda_event)}")
                  ec2_client = boto3.client("ec2")
                  gs_client = boto3.client("groundstation")

                  dataflow_endpoint_group_status = get_dataflow_endpoint_group_status(lambda_event)
                  dataflow_endpoint_group_id = get_dataflow_endpoint_group_id(lambda_event)

                  if dataflow_endpoint_group_status == "PREPASS":
                      handle_prepass(ec2_client, gs_client, dataflow_endpoint_group_id)

              def get_dataflow_endpoint_group_status(lambda_event):
                  dataflow_endpoint_group_status = lambda_event.get("detail", {}).get("dataflowEndpointGroupState")
                  logger.info(f"DataflowEndpointGroup status is {dataflow_endpoint_group_status}")
                  return dataflow_endpoint_group_status

              def get_dataflow_endpoint_group_id(lambda_event):
                  dataflow_endpoint_group_id = lambda_event.get("detail", {}).get("dataflowEndpointGroupId","")
                  logger.info(f"DataflowEndpointGroup Id is {dataflow_endpoint_group_id}")
                  return dataflow_endpoint_group_id

              def get_instance_state(ec2_client, instance_id):
                  response = ec2_client.describe_instance_status(InstanceIds=[instance_id], IncludeAllInstances=True)
                  instance_statuses = response.get("InstanceStatuses", {})
                  assert len(instance_statuses) == 1

                  instance_state = instance_statuses[0].get("InstanceState", {}).get("Name")
                  logger.info(f"Instance {instance_id} state is {instance_state}")
                  return instance_state

              def get_instance_id_from_ip_address(ec2_client, ip_addr):
                  ec2_response = ec2_client.describe_network_interfaces(
                          Filters=[
                          {
                              'Name': 'private-ip-address',
                              'Values': [
                                  ip_addr,
                              ]
                          },
                      ])

                  network_interfaces = ec2_response.get('NetworkInterfaces', [])
                  assert len(network_interfaces) == 1

                  instance_id = ec2_response.get('NetworkInterfaces')[0].get("Attachment", {}).get('InstanceId', '')
                  logger.info(f"Found instance {instance_id} associated with Dataflow Endpoint Group")

                  return instance_id

              def handle_prepass(ec2_client, gs_client, dataflowEndpointGroupId):
                  dataflow_endpoint_group = gs_client.get_dataflow_endpoint_group(dataflowEndpointGroupId=dataflowEndpointGroupId)

                  for endpointDetails in dataflow_endpoint_group.get("endpointsDetails", []):
                      ip_addr = endpointDetails.get('endpoint', {}).get('address', {}).get('name', '')

                      ec2_instance_id = get_instance_id_from_ip_address(ec2_client, ip_addr)
                      instance_state = get_instance_state(ec2_client, ec2_instance_id)
                      if instance_state == "stopped":
                          logger.info(f"Starting {ec2_instance_id}")
                          ec2_client.start_instances(InstanceIds=[ec2_instance_id])
                      else:
                          logger.warning(f"Not starting {ec2_instance_id} because its state is {instance_state}")

  GroundStationCloudWatchEventHandlerLambdaRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:StartInstances
              - ec2:StopInstances
            Resource:
              - Fn::Sub:
                - "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}"
                - Region: !Ref AWS::Region
                  Account: !Ref AWS::AccountId
                  InstanceId: !Ref ReceiverInstance
          - Effect: Allow
            Action:
              - ec2:DescribeInstanceStatus
              - ec2:DescribeNetworkInterfaces
              - groundstation:*
            Resource:
              - '*'

  GroundStationCloudWatchEventHandlerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref GroundStationCloudWatchEventHandlerLambdaRolePolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole

  GroundStationCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        source:
          - "aws.groundstation"
        detail-type:
          - "Ground Station Dataflow Endpoint Group State Change"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt GroundStationCloudWatchEventHandlerLambda.Arn
          Id: "GroundStationCloudWatchEventHandler"

  PermissionForGroundStationCloudWatchEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GroundStationCloudWatchEventHandlerLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt GroundStationCloudWatchEventRule.Arn

# ============================================
# Outputs
# ============================================

Outputs:
  SnsTopicArn:
    Value:
      Ref: SNSTopic
    Export:
      Name: !Sub "${AWS::StackName}-SnsTopicArn"
